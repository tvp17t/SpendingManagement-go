package localization

// Code generated by dart2go-skeleton (quick pass). DO NOT EDIT BY HAND.
// Original file: lib/setting/localization/app_localizations.dart
// Notes:
// - This is a structural skeleton to help migrate from Dart to Go while *keeping directory layout*.
// - Original Dart source is embedded below in comments for reference.
// - Replace TODOs with real implementations.
// - Consider organizing packages and moving UI-specific code out; Flutter UI has no direct Go equivalent.

/*
----- BEGIN ORIGINAL DART CODE -----
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:convert' show json;
import 'package:spending_management/setting/localization/app_localizations_delegate.dart';

class AppLocalizations {
  final Locale locale;

  AppLocalizations(this.locale);

  static AppLocalizations of(BuildContext context) {
    return Localizations.of<AppLocalizations>(context, AppLocalizations)!;
  }

  static const LocalizationsDelegate<AppLocalizations> delegate =
      AppLocalizationsDelegate();

  Map<String, String> _localizedStrings = {};

  Future<void> load() async {
    String jsonString =
        await rootBundle.loadString('assets/lang/${locale.languageCode}.json');
    Map<String, dynamic> jsonMap = json.decode(jsonString);
    _localizedStrings = jsonMap.map<String, String>((key, value) {
      return MapEntry(key, value.toString());
    });
  }

  String translate(String key) => _localizedStrings[key] as String;

  bool get isEnLocale => locale.languageCode == 'en';
}

----- END ORIGINAL DART CODE -----
*/

// === AUTO-GENERATED SKELETONS ===
type AppLocalizations struct {
	// TODO: add fields translated from Dart
}

